- Testing small pieces of code (units) - usually single method, one should quickly understand the test
- Testing in isolation from the rest of production code - understand how your component works, how will interact with other components
- Testing only public endpoints - 
- Running the test gets test pass/fail

TDD - using unit test to design code
- Tests describe behaviour of the code (docs)
- red, green, refactor cycle.

Arrange, act, assert 3A

- Arrange: Get the environment ready.
- Act: Call the method under test.
- Assert: Ensure that what you expected to happen, happened.

[Fact]
public void popping_returns_last_pushed_item_from_stack()
{
   // Arrange
   var stack = new Stack<string>();
   string value = "Hello, World!";
   stack.Push(value);
   
   // Act
   string result = stack.Pop();
   
   // Assert
   Assert.Equal(value, result);
}


Single assertion rule - test should test single behaviour (it doesn't mean that there should be only one Assert.)

Test only the code you write

MVC:
Keep BL out of controllers
Passing service dependencies via controller constructor (DI, Ninject)
Favoring Action Results over HttpContext Manipulation

Fakes - for handling external dependencies




